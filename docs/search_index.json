[["index.html", "Data Visualization with ggplot2 Preface Software information", " Data Visualization with ggplot2 Aravind Hebbali 2021-06-05 Preface This work is licensed under a Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International License. Software information The R session information when compiling this book is shown below: sessionInfo() ## R version 4.1.0 (2021-05-18) ## Platform: x86_64-w64-mingw32/x64 (64-bit) ## Running under: Windows 10 x64 (build 19042) ## ## Matrix products: default ## ## locale: ## [1] LC_COLLATE=English_United States.1252 ## [2] LC_CTYPE=English_United States.1252 ## [3] LC_MONETARY=English_United States.1252 ## [4] LC_NUMERIC=C ## [5] LC_TIME=English_United States.1252 ## ## attached base packages: ## [1] stats graphics grDevices utils datasets methods base ## ## loaded via a namespace (and not attached): ## [1] bookdown_0.22 digest_0.6.27 R6_2.5.0 jsonlite_1.7.2 ## [5] magrittr_2.0.1 evaluate_0.14 highr_0.9 stringi_1.6.2 ## [9] rlang_0.4.11 rstudioapi_0.13 jquerylib_0.1.4 bslib_0.2.5.1 ## [13] rmarkdown_2.8 tools_4.1.0 stringr_1.4.0 xfun_0.23 ## [17] yaml_2.2.1 compiler_4.1.0 htmltools_0.5.1.1 knitr_1.33 ## [21] sass_0.4.0 We do not add prompts (&gt; and +) to R source code in this book, and we comment out the text output with two hashes ## by default, as you can see from the R session information above. This is for your convenience when you want to copy and run the code (the text output will be ignored since it is commented out). Package names are in bold text (e.g., rmarkdown), and function names are followed by parentheses (e.g., bookdown::render_book()). The double-colon operator :: means accessing an object from a package. "],["about-the-author.html", "About the Author", " About the Author Aravind Hebbali is the founder of Rsquared Academy. He earned his Masters in Economics from Madras School of Economics. As an active R user, he has authored several R packages such as olsrr rfm descriptr blorr xplorerr In 2015, he founded Rsquared Academy, a free and open source education initiative with focus on data science and analytics. Apart from self paced online courses, Rsquared Academy offers customized learning modules for corporates and universities. You can find him on GitHub. "],["ggplot2-quicktour.html", "Chapter 1 Quick Tour 1.1 Introduction 1.2 Libraries, Code &amp; Data 1.3 Scatter Plot 1.4 Bar Plot 1.5 Box Plot 1.6 Line Chart 1.7 Histogram", " Chapter 1 Quick Tour 1.1 Introduction In this chapter, we will learn to quickly build a set of plots that are routinely used to explore data using qplot(). It can be used to quickly create plots but also has certain limitations. Nevertheless, if you want to quickly explore data using a single function, qplot() is your friend. 1.2 Libraries, Code &amp; Data We will use the following libraries in this chapter: readr ggplot2 All the data sets used in this chapter can be found here and code can be downloaded from here. 1.3 Scatter Plot Scatter plots are used to examine the relationship between two continuous variables. The relationship can be examined across the levels of a categorical variable as well. Let us begin by creating scatter plots. The first two inputs are the variables/columns representing the X and Y axis. The next input is the name of the data set. qplot(disp, mpg, data = mtcars) If you want the relationship between the two variables to be represented by both points and line, use the geom argument and supply it the values using a character vector. qplot(disp, mpg, data = mtcars, geom = c(&#39;point&#39;, &#39;line&#39;)) The color of the points can be mapped to a categorical variable, in our case cyl, using the color argument. Ensure that the variable is categorical using factor(). qplot(disp, mpg, data = mtcars, color = factor(cyl)) The shape and size of the points can also be mapped to variables using the shape and size argument as shown in the below examples. qplot(disp, mpg, data = mtcars, shape = factor(cyl)) Ensure that size is mapped to a continuous variable. qplot(disp, mpg, data = mtcars, size = qsec) 1.4 Bar Plot A bar plot represents data in rectangular bars. The length of the bars are proportional to the values they represent. Bar plots can be either horizontal or vertical. The X axis of the plot represents the levels or the categories and the Y axis represents the frequency/count of the variable. To create a bar plot, the first input must be a categorical variable. You can convert a variable to type factor (R equivalent of categorical) using the factor() function. The next input is the name of the data set and the final input is the geom which is supplied the value 'bar'. qplot(factor(cyl), data = mtcars, geom = c(&#39;bar&#39;)) You can create a stacked bar plot using the fill argument and mapping it to another categorical variable. qplot(factor(cyl), data = mtcars, geom = c(&#39;bar&#39;), fill = factor(am)) 1.5 Box Plot The box plot is a standardized way of displaying the distribution of data based on the five number summary: minimum, first quartile, median, third quartile, and maximum. Box plots are useful for detecting outliers and for comparing distributions. It shows the shape, central tendancy and variability of the data. Box plots can be created by supplying the value 'boxplot' to the geom argument. The firstinput must be a categorical variable and the second must be a continuous variable. qplot(factor(cyl), mpg, data = mtcars, geom = c(&#39;boxplot&#39;)) Unlike plot(), we cannot create box plots using a single variable. If you are not comparing the distribution of a variable across the levels of a categorical variable, you must supply the value 1 as the first input as show below. qplot(factor(1), mpg, data = mtcars, geom = c(&#39;boxplot&#39;)) 1.6 Line Chart Line charts are used to examing trends across time. To create a line chart, supply the value 'line' to the geom argument. The first two inputs should be names of the columns/variables representing the X and Y axis, and the third input must be the name of the data set. qplot(x = date, y = unemploy, data = economics, geom = c(&#39;line&#39;)) The appearance of the line can be modified using the color argument as shown below. qplot(x = date, y = unemploy, data = economics, geom = c(&#39;line&#39;), color = &#39;red&#39;) 1.7 Histogram A histogram is a plot that can be used to examine the shape and spread of continuous data. It looks very similar to a bar graph and can be used to detect outliers and skewness in data. A histogram is created using the bins argument as shown below. The first input is the name of the continuous variable and the second is the name of the data set. qplot(mpg, data = mtcars, bins = 5) "],["ggplot2-geoms.html", "Chapter 2 Geoms 2.1 Introduction 2.2 Libraries, Code &amp; Data 2.3 Point 2.4 Regression Line 2.5 Bar 2.6 Columns 2.7 Boxplot 2.8 Histogram 2.9 Line 2.10 Label 2.11 Text", " Chapter 2 Geoms 2.1 Introduction In this chapter, we will create some of the most routinely used plots to explore data using the geom_* functions. 2.2 Libraries, Code &amp; Data We will use the following libraries in this chapter: readr ggplot2 tibble dplyr All the data sets used in this chapter can be found here and code can be downloaded from here. 2.2.1 Data ecom &lt;- readr::read_csv(&#39;https://raw.githubusercontent.com/rsquaredacademy/datasets/master/web.csv&#39;) ecom ## # A tibble: 1,000 x 11 ## id referrer device bouncers n_visit n_pages duration country purchase ## &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt; &lt;lgl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt; &lt;lgl&gt; ## 1 1 google laptop TRUE 10 1 693 Czech Repub~ FALSE ## 2 2 yahoo tablet TRUE 9 1 459 Yemen FALSE ## 3 3 direct laptop TRUE 0 1 996 Brazil FALSE ## 4 4 bing tablet FALSE 3 18 468 China TRUE ## 5 5 yahoo mobile TRUE 9 1 955 Poland FALSE ## 6 6 yahoo laptop FALSE 5 5 135 South Africa FALSE ## 7 7 yahoo mobile TRUE 10 1 75 Bangladesh FALSE ## 8 8 direct mobile TRUE 10 1 908 Indonesia FALSE ## 9 9 bing mobile FALSE 3 19 209 Netherlands FALSE ## 10 10 google mobile TRUE 6 1 208 Czech Repub~ FALSE ## # ... with 990 more rows, and 2 more variables: order_items &lt;dbl&gt;, ## # order_value &lt;dbl&gt; 2.2.2 Data Dictionary id: row id referrer: referrer website/search engine os: operating system browser: browser device: device used to visit the website n_pages: number of pages visited duration: time spent on the website (in seconds) repeat: frequency of visits country: country of origin purchase: whether visitor purchased order_value: order value of visitor (in dollars) 2.3 Point A scatter plot displays the relationship between two continuous variables. In ggplot2, we can build a scatter plot using geom_point(). Scatter plots can show you visually the strength of the relationship between the variables the direction of the relationship between the variables and whether outliers exist The variables representing the X and Y axis can be specified either in ggplot() or in geom_point(). We will learn to modify the appearance of the points in a different post. ggplot(ecom, aes(x = n_pages, y = duration)) + geom_point() 2.4 Regression Line A regression line can be fit using either: geom_abline() geom_smooth() If you are using geom_abline(), you need to specify the intercept and slope as shown in the below example: ggplot(mtcars, aes(x = wt, y = mpg)) + geom_point() + geom_abline(intercept = 37.285, slope = -5.344) If you are using geom_smooth(), you need to specify the method of fitting the line, which can be lm or loess. You also need to indicate whether the confidence interval must be displayed using the se argument. ggplot(mtcars, aes(x = wt, y = mpg)) + geom_smooth(method = &#39;lm&#39;, se = TRUE) ## `geom_smooth()` using formula &#39;y ~ x&#39; Here we use the 'loess' method to fit the regression line. ggplot(mtcars, aes(x = wt, y = mpg)) + geom_smooth(method = &#39;loess&#39;, se = FALSE) ## `geom_smooth()` using formula &#39;y ~ x&#39; 2.5 Bar Bar plots present grouped data with rectangular bars. The bars may represent the frequency of the groups or values. Bar plots can be: horizontal vertical grouped stacked proportional 2.5.1 Frequency ggplot(ecom, aes(x = factor(device))) + geom_bar() 2.5.2 Weight If the bars should represent a continuous variable, use the weight argument within aes(). In the below example, the bars do not represent the count of devices, instead, they represent the total order value for each device type. ggplot(ecom, aes(x = factor(device))) + geom_bar(aes(weight = order_value)) 2.5.3 Stacked Bar Plot To create a stacked bar plot, the fill argument must be mapped to a categorical variable. ggplot(ecom, aes(x = factor(device))) + geom_bar(aes(fill = purchase)) 2.5.4 Horizontal Bar Plot A horizontal bar plot can be created by flipping the coordinate axes using the coord_flip() function. ggplot(ecom, aes(x = factor(device))) + geom_bar(aes(fill = purchase)) + coord_flip() 2.6 Columns If the data has already been summarized, you can use geom_col() instead of geom_bar(). In the below example, we have the total visits for each device type. The data has already been summarized and as such we cannot use geom_bar(). device &lt;- c(&#39;laptop&#39;, &#39;mobile&#39;, &#39;tablet&#39;) visits &lt;- c(30000, 12000, 5000) traffic &lt;- tibble::tibble(device, visits) ggplot(traffic, aes(x = device, y = visits)) + geom_col(fill = &#39;blue&#39;) 2.7 Boxplot The box plot is a standardized way of displaying the distribution of data based on the five number summary: minimum, first quartile, median, third quartile, and maximum. Box plots are useful for detecting outliers and for comparing distributions. It shows the shape, central tendancy and variability of the data. Use geom_boxplot() to create a box plot. ggplot(ecom, aes(x = factor(device), y = n_pages)) + geom_boxplot() 2.8 Histogram A histogram is a plot that can be used to examine the shape and spread of continuous data. It looks very similar to a bar graph and can be used to detect outliers and skewness in data. Use geom_histogram() to create a histogram. ggplot(ecom, aes(x = duration)) + geom_histogram() ## `stat_bin()` using `bins = 30`. Pick better value with `binwidth`. You can control the number of bins using the bins argument. ggplot(ecom, aes(x = duration)) + geom_histogram(bins = 5) 2.9 Line Line charts are used to examine trends over time. We will use a different data set for exploring line plots. 2.9.1 Data gdp &lt;- readr::read_csv(&#39;https://raw.githubusercontent.com/rsquaredacademy/datasets/master/gdp.csv&#39;) ## Warning: Missing column names filled in: &#39;X1&#39; [1] gdp ## # A tibble: 6 x 6 ## X1 X year growth india china ## &lt;dbl&gt; &lt;dbl&gt; &lt;date&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 1 1 2000-01-01 6 5 8 ## 2 2 2 2001-01-01 9 9 5 ## 3 3 3 2002-01-01 8 8 6 ## 4 4 4 2003-01-01 9 8 8 ## 5 5 5 2004-01-01 9 5 9 ## 6 6 6 2005-01-01 8 7 8 Use geom_line() to create a line chart. In the below plot, we chart the GDP of India, the fastest growing economy in emerging markets, across years. ggplot(gdp, aes(year, india)) + geom_line() The color and line type can be modified using the color and linetype arguments. We will explore the different line types in an upcoming post. ggplot(gdp, aes(year, india)) + geom_line(color = &#39;blue&#39;, linetype = &#39;dashed&#39;) Add horizontal or vertical lines using geom_hline() geom_vline() 2.9.2 Horizontal Line To add a horizontal line, the Y axis intercept must be supplied using the yintercept argument. ggplot(mtcars, aes(x = wt, y = mpg)) + geom_point() + geom_hline(yintercept = 30) 2.9.3 Vertical Line For the vertical line, the X axis intercept must be supplied using the xintercept argument. ggplot(mtcars, aes(x = wt, y = mpg)) + geom_point() + geom_vline(xintercept = 5) 2.10 Label You can label the points using geom_label(). ggplot(mtcars, aes(disp, mpg, label = rownames(mtcars))) + geom_label() 2.11 Text geom_text() offers another way to add text to the plots. We will learn to modify the appearance and location of the text in another post. ggplot(mtcars, aes(disp, mpg, label = rownames(mtcars))) + geom_text(check_overlap = TRUE, size = 2) "],["ggplot2-aesthetics.html", "Chapter 3 Aesthetics 3.1 Introduction 3.2 Libraries, Code &amp; Data 3.3 Color 3.4 Line Chart 3.5 Bar Plots 3.6 Histograms 3.7 Box Plots", " Chapter 3 Aesthetics 3.1 Introduction In this chapter, we will focus on the aesthetics i.e. color, shape, size, alpha, line type, line width etc. We can map these to variables or specify values for them. If we want to map the above to variables, we have to specify them within the aes() function. We will look at both methods in the following sections. Explore aesthetics such as color shape size fill alpha width 3.2 Libraries, Code &amp; Data We will use the following libraries in this chapter: readr ggplot2 dplyr tidyr All the data sets used in this chapter can be found here and code can be downloaded from here. 3.2.1 Data ecom &lt;- readr::read_csv(&#39;https://raw.githubusercontent.com/rsquaredacademy/datasets/master/web.csv&#39;) ecom ## # A tibble: 1,000 x 11 ## id referrer device bouncers n_visit n_pages duration country purchase ## &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt; &lt;lgl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt; &lt;lgl&gt; ## 1 1 google laptop TRUE 10 1 693 Czech Repub~ FALSE ## 2 2 yahoo tablet TRUE 9 1 459 Yemen FALSE ## 3 3 direct laptop TRUE 0 1 996 Brazil FALSE ## 4 4 bing tablet FALSE 3 18 468 China TRUE ## 5 5 yahoo mobile TRUE 9 1 955 Poland FALSE ## 6 6 yahoo laptop FALSE 5 5 135 South Africa FALSE ## 7 7 yahoo mobile TRUE 10 1 75 Bangladesh FALSE ## 8 8 direct mobile TRUE 10 1 908 Indonesia FALSE ## 9 9 bing mobile FALSE 3 19 209 Netherlands FALSE ## 10 10 google mobile TRUE 6 1 208 Czech Repub~ FALSE ## # ... with 990 more rows, and 2 more variables: order_items &lt;dbl&gt;, ## # order_value &lt;dbl&gt; 3.2.2 Data Dictionary id: row id referrer: referrer website/search engine os: operating system browser: browser device: device used to visit the website n_pages: number of pages visited duration: time spent on the website (in seconds) repeat: frequency of visits country: country of origin purchase: whether visitor purchased order_value: order value of visitor (in dollars) 3.3 Color In ggplot2, when we mention color or colour, it usually refers to the color of the geoms. The fill argument is used to specify the color of the shapes in certain cases. In this first section, we will see how we can specify the color for the different geoms we learnt in the previous chapter. 3.3.1 Point For points, the color argument specifies the color of the point for certain shapes and border for others. The fill argument is used to specify the background for some shapes and will not work with other shapes. Let us look at an example: ggplot(mtcars, aes(x = disp, y = mpg, color = factor(cyl))) + geom_point() We can map the variable to color in the geom_point() function as well since it inherits the data from the ggplot() function. ggplot(mtcars, aes(x = disp, y = mpg)) + geom_point(aes(color = factor(cyl))) If you do not want to map a variable to color, you can specify it separately using the color argument but in this case it should be outside the aes() function. ggplot(mtcars, aes(x = disp, y = mpg)) + geom_point(color = &#39;blue&#39;) Now we will change the shape of the points to understand the difference between color and fill arguments. It can be again mapped to variables or values. Let us map shape to variables. ggplot(mtcars, aes(x = disp, y = mpg, shape = factor(cyl))) + geom_point() Let us map shape to cyl in the geom_point() function. Remember, when you are mapping an aesthetic to a variable, it must be inside aes(). ggplot(mtcars, aes(x = disp, y = mpg)) + geom_point(aes(shape = factor(cyl))) Instead of mapping shape to a variable, let us specify a value for shape. In this case, shape is not wrapped inside aes() as we are not mapping it to a variable. ggplot(mtcars, aes(x = disp, y = mpg)) + geom_point(shape = 5) Let us specify a color for the point using color argument. ggplot(mtcars, aes(x = disp, y = mpg)) + geom_point(shape = 5, color = &#39;blue&#39;) Background color cannot be added for all shapes. In the below example, we try to modify the background color using the fill argument but it does not work. ggplot(mtcars, aes(x = disp, y = mpg)) + geom_point(shape = 5, fill = &#39;blue&#39;) Since the shape number is now greater than 21, fill argument will add background color in the below case. ggplot(mtcars, aes(x = disp, y = mpg)) + geom_point(shape = 22, fill = &#39;blue&#39;) In shapes greater than number 21, color argument will modify the border of the shape. ggplot(mtcars, aes(x = disp, y = mpg)) + geom_point(shape = 22, color = &#39;blue&#39;) Let us map size of points to a variable. It is advised to map size only to continuous variables and not categorical variables. ggplot(mtcars, aes(x = disp, y = mpg, size = disp)) + geom_point() If you map size to categorical variables, ggplot2 will throw a warning. ggplot(mtcars, aes(x = disp, y = mpg)) + geom_point(size = 4) To modify the opacity of the color, use the alpha argument. ggplot(mtcars, aes(x = disp, y = mpg)) + geom_point(aes(alpha = factor(cyl)), color = &#39;blue&#39;) ## Warning: Using alpha for a discrete variable is not advised. 3.4 Line Chart So far we have focussed on geom_point() to learn how to map aesthetics to variables. To explore line type and line width, we will use geom_line(). In the previous chapter, we used geom_line() to build line charts. Now we will modify the appearance of the line. In the section below, we will specify values for color, line type and width. In the next section, we will map the same to variables in the data. We will use a new data set. You can download it from here. It contains GDP (Gross Domestic Product) growth data for the BRICS (Brazil, Russia, India, China, South Africa) for the years 2000 to 2005. 3.4.1 Data gdp &lt;- readr::read_csv(&#39;https://raw.githubusercontent.com/rsquaredacademy/datasets/master/gdp.csv&#39;) ## Warning: Missing column names filled in: &#39;X1&#39; [1] A line chart can be created using geom_line(). In the below example, we examine the GDP trend of India and modify the color of the line to 'blue'. ggplot(gdp, aes(year, india)) + geom_line(color = &#39;blue&#39;) To modify the line type, use the linetype argument. It can take values between 1 and 5. ggplot(gdp, aes(year, india)) + geom_line(linetype = 2) The line type can also be mentioned in the following way: ggplot(gdp, aes(year, india)) + geom_line(linetype = &#39;dashed&#39;) The width of the line can be modified using the size argument. ggplot(gdp, aes(year, india)) + geom_line(size = 2) Now let us map the aesthetics to the variables. The data used in the above example cannot be used as we need a variable with country names. We will use gather() function from the tidyr package to reshape the data. gdp2 &lt;- gdp %&gt;% select(year, growth, india, china) %&gt;% gather(key = country, value = gdp, -year) gdp2 ## # A tibble: 18 x 3 ## year country gdp ## &lt;date&gt; &lt;chr&gt; &lt;dbl&gt; ## 1 2000-01-01 growth 6 ## 2 2001-01-01 growth 9 ## 3 2002-01-01 growth 8 ## 4 2003-01-01 growth 9 ## 5 2004-01-01 growth 9 ## 6 2005-01-01 growth 8 ## 7 2000-01-01 india 5 ## 8 2001-01-01 india 9 ## 9 2002-01-01 india 8 ## 10 2003-01-01 india 8 ## 11 2004-01-01 india 5 ## 12 2005-01-01 india 7 ## 13 2000-01-01 china 8 ## 14 2001-01-01 china 5 ## 15 2002-01-01 china 6 ## 16 2003-01-01 china 8 ## 17 2004-01-01 china 9 ## 18 2005-01-01 china 8 To map the aesthetics to a variable, we must use the group argument. In the below example, we map the aesthetics to country. But we cannot distinguish between the lines as their color, width and line type are the same. We have easily plotted the GDP trend of all countries using the group argument. Now, let us ensure that we can distinguish and identidy them using different aesthetics. ggplot(gdp2, aes(year, gdp, group = country)) + geom_line() Let us begin by ensuring that the lines have different color using the color argument within aes() and assigning it the variable country. ggplot(gdp2, aes(year, gdp, group = country)) + geom_line(aes(color = country)) Instead of color, now we modify the line type using the linetype argument. ggplot(gdp2, aes(year, gdp, group = country)) + geom_line(aes(linetype = country)) In the below instance, we assign different width to the lines using the size argument. ggplot(gdp2, aes(year, gdp, group = country)) + geom_line(aes(size = country)) ## Warning: Using size for a discrete variable is not advised. Before we wrap up, let us quickly see how we can map aesthetics to variables for different plots. 3.5 Bar Plots Here we create a stacked bar plot by mapping fill to purchase. ggplot(ecom, aes(device, fill = purchase)) + geom_bar() 3.6 Histograms Instead of a bar chart, we create a histogram and again map fill to purchase. ggplot(ecom) + geom_histogram(aes(duration, fill = purchase), bins = 10) 3.7 Box Plots We repeat the same exercise below, but replace the bar plot with a box plot. ggplot(ecom) + geom_boxplot(aes(device, duration, fill = purchase)) In all the above cases, you can observe that when we are mapping aesthetics such as color, fill, shape, size or linetype to variables, they are all wrapped inside aes(). "],["ggplot2-labels.html", "Chapter 4 Labels 4.1 Introduction 4.2 Basic Plot 4.3 Title &amp; Subtitle 4.4 Axis Labels 4.5 Labs 4.6 Axis Range 4.7 Format Title &amp; Axis Labels 4.8 Horizontal Alignment 4.9 Putting it all together", " Chapter 4 Labels 4.1 Introduction In this chapter, we will learn to: add title and subtitle to the plot modify axis labels modify axis range remove axis format axis 4.2 Basic Plot Let us start with a simple scatter plot. We will continue to use the mtcars data set and examine the relationship between displacement and miles per gallon using geom_point(). ggplot(mtcars) + geom_point(aes(disp, mpg)) 4.3 Title &amp; Subtitle There are two ways to add title to a plot: ggtitle() labs() 4.3.1 ggtitle() Let us explore the ggtitle() function first. It takes two arguments: label: title of the plot subtitle: subtitle of the plot ggplot(mtcars) + geom_point(aes(disp, mpg)) + ggtitle(label = &#39;Displacement vs Mileage&#39;, subtitle = &#39;disp vs mpg&#39;) 4.4 Axis Labels You can add labels to the axis using: xlab() ylab() labs() ggplot(mtcars) + geom_point(aes(disp, mpg)) + xlab(&#39;Displacement&#39;) + ylab(&#39;Miles Per Gallon&#39;) 4.5 Labs The labs() function can be used to add the following to a plot: title subtitle X axis label Y axis label ggplot(mtcars) + geom_point(aes(disp, mpg)) + labs(title = &#39;Displacement vs Mileage&#39;, subtitle = &#39;disp vs mpg&#39;, x = &#39;Displacement&#39;, y = &#39;Miles Per Gallon&#39;) 4.6 Axis Range In certain scenarios, you may want to modify the range of the axis. In ggplot2, we can achieve this using: xlim() ylim() expand_limits() xlim() and ylim() take a numeric vector of length 2 as input expand_limits() takes two numeric vectors (each of length 2), one for each axis in all of the above functions, the first element represents the lower limit and the second element represents the upper limit 4.6.1 X Axis In the below example, we limit the range of the X axis between 0 and 600 using xlim. ggplot(mtcars) + geom_point(aes(disp, mpg)) + xlim(c(0, 600)) 4.6.2 Y Axis Let us limit the range of the Y axis between 0 and 40. ggplot(mtcars) + geom_point(aes(disp, mpg)) + ylim(c(0, 40)) 4.6.3 Expand Limits Let us use expand_limits() to limit the range of both the X and Y axis. The first input is the range for the X axis and the second input for the Y axis. In both the cases, we use a numeric vector of length 2 to specify the lower and upper limit. ggplot(mtcars) + geom_point(aes(disp, mpg)) + expand_limits(x = c(0, 600), y = c(0, 40)) 4.6.4 Remove Axis Labels If you want to remove the axis labels all together, use the theme() function. It allows us to modify every aspect of the theme of the plot. Within theme(), set the following to element_blank(). axis.title.x axis.title.y element_blank() will remove the title of the X and Y axis. ggplot(mtcars) + geom_point(aes(disp, mpg)) + theme(axis.title.x = element_blank(), axis.title.y = element_blank()) 4.7 Format Title &amp; Axis Labels To format the title or the axis labels, we have to modify the theme of the plot using the theme() function. We can modify: color font family font face font size horizontal alignment and angle In addition to theme(), we will also use element_text(). It should be used whenever you want to modify the appearance of any text element of your plot. 4.7.1 Color In the below example, we use the color argument within element_text() to modify the color of the title of the plot to 'blue'. ggplot(mtcars) + geom_point(aes(disp, mpg)) + ggtitle(&#39;Diaplacement vs Mileage&#39;) + theme(plot.title = element_text(color = &#39;blue&#39;)) 4.7.2 Font Family Let us change the font family of the plot title to 'Arial' by using the family argument. ggplot(mtcars) + geom_point(aes(disp, mpg)) + ggtitle(&#39;Diaplacement vs Mileage&#39;) + theme(plot.title = element_text(family = &#39;Arial&#39;)) 4.7.3 Font Face The font face can be any of the following: plain bold italic bold.italic The face argument can be used to modify the font face of the title of the plot. ggplot(mtcars) + geom_point(aes(disp, mpg)) + ggtitle(&#39;Diaplacement vs Mileage&#39;) + theme(plot.title = element_text(face = &#39;bold&#39;)) 4.7.4 Font Size The size of the title of the plot can be modified using the size argument. ggplot(mtcars) + geom_point(aes(disp, mpg)) + ggtitle(&#39;Diaplacement vs Mileage&#39;) + theme(plot.title = element_text(size = 8)) 4.8 Horizontal Alignment To modify the horizontal alignment of the title, use the hjust argument. It can take values between 0 and 1. If the value is closer to 0, the text will be left-aligned and viceversa. ggplot(mtcars) + geom_point(aes(disp, mpg)) + ggtitle(&#39;Diaplacement vs Mileage&#39;) + theme(plot.title = element_text(hjust = 0.3)) 4.9 Putting it all together 4.9.1 Title ggplot(mtcars) + geom_point(aes(disp, mpg)) + ggtitle(&#39;Diaplacement vs Mileage&#39;) + theme(plot.title = element_text(color = &#39;blue&#39;, family = &#39;Arial&#39;, face = &#39;bold&#39;, size = 12, hjust = 0.5)) 4.9.2 X axis label ggplot(mtcars) + geom_point(aes(disp, mpg)) + xlab(&#39;Diaplacement&#39;) + theme(axis.title.x = element_text(color = &#39;blue&#39;, family = &#39;Arial&#39;, face = &#39;bold&#39;, size = 8, hjust = 0.5, angle = 15)) 4.9.3 Y axis label ggplot(mtcars) + geom_point(aes(disp, mpg)) + ylab(&#39;Miles Per Gallon&#39;) + theme(axis.title.y = element_text(color = &#39;blue&#39;, family = &#39;Arial&#39;, face = &#39;italic&#39;, size = 8, vjust = 0.3, angle = 90)) "],["ggplot2-text-annotations.html", "Chapter 5 Text Annotations 5.1 Introduction 5.2 Annotate 5.3 Putting it all together..", " Chapter 5 Text Annotations 5.1 Introduction In this chapter, we will learn to add text to the plots. add custom text modify color modify size modify fontface modify angle 5.2 Annotate We will use the annotate() function to add custom text to the plots. You can use the annotate() function to add rectangles/segments/pointrange as well but our focus will be on adding text. Let us start with a simple scatter plot. annotate() takes the following arguments: geom : specify text x : x axis location y : y axis location label : custom text color : color of text size : size of text fontface : fontface of text angle : angle of text 5.2.1 Add Text Let us begin by adding text to a scatter plot. We will use the mtcars data set and continue to examine the relationship between displacement and miles per gallon. To add the text, we have to indicate that we are using annotate() for adding text, and we do this by ensuring that the first input is the word 'text'. Now, ggplot2 knows that it should add a text to the plot but it still needs other information such as: where should the text appear on the plot i.e. location of the text and the text itself We will provide the location by specifying points on the X and Y axis which are also the second and third inputs to annotate() and the final input is the text itself, which in our example is 'Sample Text'. ggplot(mtcars) + geom_point(aes(disp, mpg)) + annotate(&#39;text&#39;, x = 200, y = 30, label = &#39;Sample Text&#39;) 5.2.2 Color Now that we know how to add text, let us look at modifying the appearance of the text. To change the color, use the color argument. In the below example, we modify the color to 'red'. ggplot(mtcars) + geom_point(aes(disp, mpg)) + annotate(&#39;text&#39;, x = 200, y = 30, label = &#39;Sample Text&#39;, color = &#39;red&#39;) 5.2.3 Size The size argument can be used to modify the size of the text. ggplot(mtcars) + geom_point(aes(disp, mpg)) + annotate(&#39;text&#39;, x = 200, y = 30, label = &#39;Sample Text&#39;, size = 6) 5.2.4 Font To choose a font of your liking, use the font argument and supply it a valid value. ggplot(mtcars) + geom_point(aes(disp, mpg)) + annotate(&#39;text&#39;, x = 200, y = 30, label = &#39;Sample Text&#39;, fontface = &#39;bold&#39;) 5.2.5 Angle The angle of the text can also be modified using the angle argument. In the below example, we modify the angle of the text to 25. ggplot(mtcars) + geom_point(aes(disp, mpg)) + annotate(&#39;text&#39;, x = 200, y = 30, label = &#39;Sample Text&#39;, angle = 25) 5.3 Putting it all together.. ggplot(mtcars) + geom_point(aes(disp, mpg)) + annotate(&#39;text&#39;, x = 200, y = 30, label = &#39;Sample Text&#39;, color = &#39;red&#39;, size = 6, fontface = &#39;bold&#39;, angle = 25) "],["ggplot2-scatter-plot.html", "Chapter 6 Scatter Plots 6.1 Introduction 6.2 Basic Plot 6.3 Jitter 6.4 Aesthetics 6.5 Regression Line", " Chapter 6 Scatter Plots 6.1 Introduction In this chapter, we will: build scatter plots modify point color fill alpha shape size fit regression line 6.2 Basic Plot As we did in the previous chapter, let us begin by creating a scatter plot using geom_point() to examine the relationship between displacement and miles per gallon using the mtcars data. ggplot(mtcars) + geom_point(aes(disp, mpg)) 6.3 Jitter If you want to avoid over plotting, use the position argument and supply it the value 'jitter'. It adds random noise to a plot and makes it easier to read. ggplot(mtcars) + geom_point(aes(disp, mpg), position = &#39;jitter&#39;) Another way to avoid over plotting is to use geom_jitter(). ggplot(mtcars) + geom_jitter(aes(disp, mpg)) 6.4 Aesthetics Now let us modify the appearance of the points. There are two ways: specify values map them to variables using aes() 6.4.1 Specify Values 6.4.1.1 Color To modify the color of the points, you can use the color argument and supply it a valid color name. In the below example, we change the color of the points to 'blue'. Keep in mind that the color argument should be outside aes(). ggplot(mtcars) + geom_point(aes(disp, mpg), color = &#39;blue&#39;, position = &#39;jitter&#39;) 6.4.1.2 Alpha The transparency of the color can be modified using the alpha argument. It takes values between 0 and 1. ggplot(mtcars) + geom_point(aes(disp, mpg), color = &#39;blue&#39;, alpha = 0.4, position = &#39;jitter&#39;) 6.4.1.3 Shape The shape of the points can be modified using the shape argument. It takes values between 0 and 25. ggplot(mtcars) + geom_point(aes(disp, mpg), shape = 3, position = &#39;jitter&#39;) 6.4.1.4 Size The size of the points can be modified using the size argument. It can take any value greater than 0. ggplot(mtcars) + geom_point(aes(disp, mpg), size = 3, position = &#39;jitter&#39;) 6.4.2 Map Variables So far, we have specified values for color, shape, size etc. Now, let us map them to variables using aes(). 6.4.2.1 Color You can modify the color of the points by mapping them to a variable using aes(). It allows you to examine the relationship between two continuous variables at different levels of a categorical variable. ggplot(mtcars) + geom_point(aes(disp, mpg, color = factor(cyl)), position = &#39;jitter&#39;) The color can be mapped to a conitnuous variable as well and in this case you will be able to examine the relationship betweem two continuous variable for a range of value of a third variable. ggplot(mtcars) + geom_point(aes(disp, mpg, color = hp), position = &#39;jitter&#39;) 6.4.2.2 Shape Shape can be mapped to categorical variables. In the below example, we use factor() to convert cyl to categorical data before mapping shape to it. ggplot2 will throw an error if you map shape to a continuous variable. ggplot(mtcars) + geom_point(aes(disp, mpg, shape = factor(cyl)), position = &#39;jitter&#39;) 6.4.2.3 Size Size must be always mapped to continuous variables. In the below example, we have mapped size to hp variable. ggplot(mtcars) + geom_point(aes(disp, mpg, size = hp), color = &#39;blue&#39;, position = &#39;jitter&#39;) If you map size to categorical data as shown in the below example, ggplot2 will throw a warning. ggplot(mtcars) + geom_point(aes(disp, mpg, size = factor(cyl)), color = &#39;blue&#39;, position = &#39;jitter&#39;) ## Warning: Using size for a discrete variable is not advised. 6.5 Regression Line geom_smooth() allows us to fit a regression line to the plot. By default it will use least squares method to fit the line but you can also use the loess method. In the below example, we fit a regression line using the least squares technique by supplying the value 'lm' to the method argument. ggplot(mtcars, aes(disp, mpg)) + geom_point(position = &#39;jitter&#39;) + geom_smooth(method = &#39;lm&#39;, se = FALSE) ## `geom_smooth()` using formula &#39;y ~ x&#39; The se argument will add a confidence interval around the regression line, if set to TRUE. 6.5.0.1 Conf. Interval ggplot(mtcars, aes(disp, mpg)) + geom_point(position = &#39;jitter&#39;) + geom_smooth(method = &#39;lm&#39;, se = TRUE) ## `geom_smooth()` using formula &#39;y ~ x&#39; 6.5.0.2 Loess Method In the below example, we use the loess method instead of the default least squares method to fit the regression line. ggplot(mtcars, aes(disp, mpg)) + geom_point(position = &#39;jitter&#39;) + geom_smooth(method = &#39;loess&#39;, se = FALSE) ## `geom_smooth()` using formula &#39;y ~ x&#39; 6.5.1 Intercept &amp; Slope If you know the intercept and the slope of the line, you can use geom_abline(). Let us regress mpg over disp and then use the result to add the line. lm(mpg ~ disp, data = mtcars) ## ## Call: ## lm(formula = mpg ~ disp, data = mtcars) ## ## Coefficients: ## (Intercept) disp ## 29.59985 -0.04122 6.5.2 Add Line ggplot(mtcars, aes(disp, mpg)) + geom_point(position = &#39;jitter&#39;) + geom_abline(slope = -0.04122, intercept = 29.59985) "],["ggplot2-line-graph.html", "Chapter 7 Line Graphs 7.1 Introduction 7.2 Case Study 7.3 Line Chart 7.4 Multiple Lines", " Chapter 7 Line Graphs 7.1 Introduction In this chapter, we will learn to: build simple line chart grouped line chart map aesthetics to variables modify line color type size 7.2 Case Study We will use a data set related to GDP growth rate. You can download it from here. It contains GDP (Gross Domestic Product) growth data for the BRICS (Brazil, Russia, India, China, South Africa) for the years 2000 to 2005. 7.2.1 Data gdp &lt;- readr::read_csv(&#39;https://raw.githubusercontent.com/rsquaredacademy/datasets/master/gdp.csv&#39;) ## Warning: Missing column names filled in: &#39;X1&#39; [1] gdp ## # A tibble: 6 x 6 ## X1 X year growth india china ## &lt;dbl&gt; &lt;dbl&gt; &lt;date&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 1 1 2000-01-01 6 5 8 ## 2 2 2 2001-01-01 9 9 5 ## 3 3 3 2002-01-01 8 8 6 ## 4 4 4 2003-01-01 9 8 8 ## 5 5 5 2004-01-01 9 5 9 ## 6 6 6 2005-01-01 8 7 8 7.3 Line Chart To create a line chart, use geom_line(). In the below example, we examine the GDP growth rate trend of India for the years 2000 to 2005. ggplot(gdp, aes(year, india)) + geom_line() 7.3.1 Line Color To modify the color of the line, use the color argument and supply it a valid color name. In the below example, we modify the color of the line to 'blue'. Remember that the color argument should be outside aes(). ggplot(gdp, aes(year, india)) + geom_line(color = &#39;blue&#39;) 7.3.2 Line Type The line type can be modified using the linetype argument. It can take 7 different values. You can specify the line type either using numbers or words as shown below: 0 : blank 1 : solid 2 : dashed 3 : dotted 4 : dotdash 5 : longdash 6 : twodash Let us modify the line type to dashed style by supplying the value 2 to the linetype argument. ggplot(gdp, aes(year, india)) + geom_line(linetype = 2) The above example can be recreated by supplying the value 'dashed' instead of 2. ggplot(gdp, aes(year, india)) + geom_line(linetype = &#39;dashed&#39;) 7.3.3 Line Size The width of the line can be modified using the size argument. It can take any value above 0 as input. ggplot(gdp, aes(year, india)) + geom_line(size = 2) 7.4 Multiple Lines 7.4.1 Modify Data Now let us map the aesthetics to the variables. The data used in the above example cannot be used as we need a variable with country names. We will use gather() function from the tidyr package to reshape the data. gdp2 &lt;- gdp %&gt;% select(year, growth, india, china) %&gt;% gather(key = country, value = gdp, -year) gdp2 ## # A tibble: 18 x 3 ## year country gdp ## &lt;date&gt; &lt;chr&gt; &lt;dbl&gt; ## 1 2000-01-01 growth 6 ## 2 2001-01-01 growth 9 ## 3 2002-01-01 growth 8 ## 4 2003-01-01 growth 9 ## 5 2004-01-01 growth 9 ## 6 2005-01-01 growth 8 ## 7 2000-01-01 india 5 ## 8 2001-01-01 india 9 ## 9 2002-01-01 india 8 ## 10 2003-01-01 india 8 ## 11 2004-01-01 india 5 ## 12 2005-01-01 india 7 ## 13 2000-01-01 china 8 ## 14 2001-01-01 china 5 ## 15 2002-01-01 china 6 ## 16 2003-01-01 china 8 ## 17 2004-01-01 china 9 ## 18 2005-01-01 china 8 In the original data, to plot GDP trend of multiple countries we will have to use geom_line() multiple times. But in the reshaped data, we have the country names as one of the variables and this can be used along with the group argument to plot data of multiple countries with a single line of code as shown below. By mapping country to the group argument, we have plotted data of all countries. ggplot(gdp2, aes(year, gdp, group = country)) + geom_line() In the above plot, we cannot distinguish between the lines and there is no way to identify which line represents which country. To make it easier to identify the trend of different countries, let us map the color argument to the variable country as shown below. Now, each country will be represented by line of different color. ggplot(gdp2, aes(year, gdp, group = country)) + geom_line(aes(color = country)) We can map linetype argument to country as well. In this case, each country will be represented by a different line type. ggplot(gdp2, aes(year, gdp, group = country)) + geom_line(aes(linetype = country)) We can map the width of the line to the variable country as well. But in this case, the plot does not look either elegant or intuitive. ggplot(gdp2, aes(year, gdp, group = country)) + geom_line(aes(size = country)) ## Warning: Using size for a discrete variable is not advised. Remember that in all the above cases, we mapped the arguments to a variable inside aes(). "],["ggplot2-bar-plot.html", "Chapter 8 Bar Plots 8.1 Introduction 8.2 Data 8.3 Basic Plot 8.4 Bar Color 8.5 Stacked Bar Plot 8.6 Grouped Bar Plot 8.7 Proportional Bar Plot 8.8 Horizontal Bar Plot 8.9 Bar Line", " Chapter 8 Bar Plots 8.1 Introduction In this chapter, we will learn to: build simple bar plot stacked bar plot grouped bar plot proportional bar plot map aesthetics to variables specify values for bar color bar line color bar line type bar line size 8.2 Data ecom &lt;- read_csv(&#39;https://raw.githubusercontent.com/rsquaredacademy/datasets/master/ecom.csv&#39;, col_types = list(col_factor(levels = c(&#39;Desktop&#39;, &#39;Mobile&#39;, &#39;Tablet&#39;)), col_logical(), col_logical(), col_factor(levels = c(&#39;Affiliates&#39;, &#39;Direct&#39;, &#39;Display&#39;, &#39;Organic&#39;, &#39;Paid&#39;, &#39;Referral&#39;, &#39;Social&#39;)))) ecom ## # A tibble: 5,000 x 4 ## device bouncers purchase referrer ## &lt;fct&gt; &lt;lgl&gt; &lt;lgl&gt; &lt;fct&gt; ## 1 Desktop FALSE FALSE Affiliates ## 2 Mobile FALSE FALSE Affiliates ## 3 Desktop TRUE FALSE Organic ## 4 Desktop FALSE FALSE Organic ## 5 Mobile TRUE FALSE Direct ## 6 Desktop TRUE FALSE Direct ## 7 Desktop FALSE FALSE Referral ## 8 Tablet TRUE FALSE Organic ## 9 Mobile TRUE FALSE Social ## 10 Desktop TRUE FALSE Organic ## # ... with 4,990 more rows 8.2.1 Data Dictionary device: device used to visit the website bouncers: whether visit was a bouncer (exit website from landing page) purchase: whether visitor purchased referrer: referrer website/search engine 8.3 Basic Plot We can create a bar plot using geom_bar(). It takes a single input, a categorical variable. In the below example, we plot the number of visits for each device type. ggplot(ecom) + geom_bar(aes(device)) 8.4 Bar Color The color of the bars can be modified using the fill argument. In the below example, we assign different colors to the 3 bars in the plot. If you use the color argument, it will modify the color of the bar line and not the background color of the bars. We will look at that later in the chapter. ggplot(ecom) + geom_bar(aes(device), fill = c(&#39;red&#39;, &#39;blue&#39;, &#39;green&#39;)) 8.5 Stacked Bar Plot If you want to look at distribution of one categorical variable across the levels of another categorical variable, you can create a stacked bar plot. In ggplot2, a stacked bar plot is created by mapping the fill argument to the second categorical variable. In the below example, we have mapped fill to referrer variable. ggplot(ecom) + geom_bar(aes(device, fill = referrer)) 8.6 Grouped Bar Plot Grouped bar plots are a variation of stacked bar plots. Instead of being stacked on top of one another, the bars are placed next to one another and grouped by levels. In the below example, we create a grouped bar plot and you can observe that the bars are placed next to one another instead of being stacked as was shown in the previous example. To create a grouped bar plot, use the position argument and set it to 'dodge'. ggplot(ecom) + geom_bar(aes(device, fill = referrer), position = &#39;dodge&#39;) 8.7 Proportional Bar Plot In a proportional bar plot, the height of all the bars is proportional or same. To create a proportional bar plot, use the position argument and set it to 'fill'. ggplot(ecom) + geom_bar(aes(device, fill = referrer), position = &#39;fill&#39;) 8.8 Horizontal Bar Plot A horizontal bar plot can be created by flipping the coordinate axes of a regular plot. To flip the axes, use coord_flip() as shown below. ggplot(ecom) + geom_bar(aes(device, fill = referrer)) + coord_flip() 8.9 Bar Line The color of the bar line can be modified using the color argument. The color can be specified either using its name or hex code. ggplot(ecom) + geom_bar(aes(device), fill = &#39;white&#39;, color = c(&#39;red&#39;, &#39;blue&#39;, &#39;green&#39;)) To modify the line type of the bar line, use the linetype argument. It can take values between 0 and 6. ggplot(ecom) + geom_bar(aes(device), fill = &#39;white&#39;, color = &#39;black&#39;, linetype = 2) The width of the bar line can be modified using the size argument. It can take any value greater than 0. ggplot(ecom) + geom_bar(aes(device), fill = &#39;white&#39;, color = &#39;black&#39;, size = 2) "],["ggplot2-box-plot.html", "Chapter 9 Box Plots 9.1 Introduction 9.2 Structure 9.3 Data 9.4 Single Plot 9.5 Compare Distributions 9.6 Horizontal Box Plot 9.7 Outliers 9.8 Aesthetics 9.9 Map Variables", " Chapter 9 Box Plots 9.1 Introduction In this chapter, we will learn to: build box plots modify box color fill alpha line size line type modify outlier color shape size alpha The box plot is a standardized way of displaying the distribution of data. It is useful for detecting outliers and for comparing distributions and shows the shape, central tendancy and variability of the data. 9.2 Structure the body of the boxplot consists of a box (hence, the name), which goes from the first quartile (Q1) to the third quartile (Q3) within the box, a vertical line is drawn at the Q2, the median of the data set two horizontal lines, called whiskers, extend from the front and back of the box the front whisker goes from Q1 to the smallest non-outlier in the data set, and the back whisker goes from Q3 to the largest non-outlier if the data set includes one or more outliers, they are plotted separately as points on the chart 9.3 Data We are going to use two different data sets in this chapter. Both the data sets have the same data but are in different formats. daily_returns &lt;- readr::read_csv(&#39;https://raw.githubusercontent.com/rsquaredacademy/datasets/master/tickers.csv&#39;) daily_returns ## # A tibble: 250 x 5 ## AAPL AMZN FB GOOG MSFT ## &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 1.38 24.2 2.12 22.4 1.12 ## 2 2.83 3.25 -0.860 5.99 0.767 ## 3 -0.0394 9.91 1.45 6.75 0.973 ## 4 0.108 3.76 -0.770 -10.7 -0.285 ## 5 1.64 19.8 4.75 8.66 0.501 ## 6 0.0689 5.33 -0.300 -0.930 0.256 ## 7 -0.561 -5.21 -0.630 -7.28 -0.708 ## 8 0.551 0.25 -0.460 0.690 0.128 ## 9 -0.217 -13.6 0.0300 6.56 0.0786 ## 10 -0.108 -4.25 0.460 2.60 0.472 ## # ... with 240 more rows 9.4 Single Plot If you are not comparing the distribution of continuous data, you can create box plot for a single variable. Unlike plot(), where we could just use 1 input, in ggplot2, we must specify a value for the X axis and it must be categorical data. Since we are not comparing distributions, we will use 1 as the value for the X axis and wrap it inside factor() to treat it as a categorical variable. In the below example, we examine the distribution of stock returns of Apple. ggplot(daily_returns) + geom_boxplot(aes(x = factor(1), y = AAPL)) 9.5 Compare Distributions 9.5.1 Data For the rest of the chapter, we will use the below data set. Instead of 5 columns, we have two columns. One for the stock names and another for returns. tidy_returns &lt;- read_csv(&#39;https://raw.githubusercontent.com/rsquaredacademy/datasets/master/tidy_tickers.csv&#39;, col_types = list(col_factor(levels = c(&#39;AAPL&#39;, &#39;AMZN&#39;, &#39;FB&#39;, &#39;GOOG&#39;, &#39;MSFT&#39;)), col_double())) tidy_returns ## # A tibble: 1,254 x 2 ## stock returns ## &lt;fct&gt; &lt;dbl&gt; ## 1 AAPL 1.38 ## 2 AAPL 2.83 ## 3 AAPL -0.0394 ## 4 AAPL 0.108 ## 5 AAPL 1.64 ## 6 AAPL 0.0689 ## 7 AAPL -0.561 ## 8 AAPL 0.551 ## 9 AAPL -0.217 ## 10 AAPL -0.108 ## # ... with 1,244 more rows With the above data, let us create a box plot where we compate the distribution of stock returns of different companies. We map X axis to the column with stock names and Y axis to the column with stock returns. Note that, the column names are wrapped inside aes(). ggplot(tidy_returns) + geom_boxplot(aes(x = stock, y = returns)) To create a horizontal bar plot, we can use coord_flip() which will flip the coordinate axes. 9.6 Horizontal Box Plot ggplot(tidy_returns) + geom_boxplot(aes(x = stock, y = returns)) + coord_flip() 9.6.1 Notch Notches are used to compare medians. You can use the notch argument and set it to TRUE. ggplot(tidy_returns) + geom_boxplot(aes(x = stock, y = returns), notch = TRUE) 9.6.2 Jitter Just for comparison, let us plot the returns as points on top of the box plot using geom_jitter(). We modify the color of the points using the color argument and the spread using the width argument. ggplot(tidy_returns, aes(x = stock, y = returns)) + geom_boxplot() + geom_jitter(width = 0.2, color = &#39;blue&#39;) 9.7 Outliers To highlight extreme observations, we can modify the appearance of outliers using the following: color shape size alpha To modify the color of the outliers, use the outlier.color argument. The color can be specified either using its name or the associated hex code. ggplot(tidy_returns) + geom_boxplot(aes(x = stock, y = returns), outlier.color = &#39;red&#39;) The shape of the outlier can be modified using the outlier.shape argument. It can take values between 0 and 25. ggplot(tidy_returns) + geom_boxplot(aes(x = stock, y = returns), outlier.shape = 23) The size of the outlier can be modified using the outlier.size argument. It can take any value greater than 0. ggplot(tidy_returns) + geom_boxplot(aes(x = stock, y = returns), outlier.size = 3) You can play around with the transparency of the outlier using the outlier.alpha argument. It can take values between 0 and 1. ggplot(tidy_returns) + geom_boxplot(aes(x = stock, y = returns), outlier.color = &#39;blue&#39;, outlier.alpha = 0.3) 9.8 Aesthetics The appearance of the box can be controlled using the following: color fill alpha line type line width 9.8.1 Specify Values The background color of the box can be modified using the fill argument. The color can be specified either using its name or the associated hex code. ggplot(tidy_returns) + geom_boxplot(aes(x = stock, y = returns), fill = c(&#39;blue&#39;, &#39;red&#39;, &#39;green&#39;, &#39;yellow&#39;, &#39;brown&#39;)) To modify the transparency of the background color, use the alpha argument. It can take any value between 0 and 1. ggplot(tidy_returns) + geom_boxplot(aes(x = stock, y = returns), fill = &#39;blue&#39;, alpha = 0.3) The color of the border can be modified using the color argument. The color can be specified either using its name or the associated hex code. ggplot(tidy_returns) + geom_boxplot(aes(x = stock, y = returns), color = c(&#39;blue&#39;, &#39;red&#39;, &#39;green&#39;, &#39;yellow&#39;, &#39;brown&#39;)) The width of the border can be changed using the size argument. It can take any value greater than 0. ggplot(tidy_returns) + geom_boxplot(aes(x = stock, y = returns), size = 1.5) To change the line type of the border, use the linetype argument. It can take any value between 0 and 6. ggplot(tidy_returns) + geom_boxplot(aes(x = stock, y = returns), linetype = 2) 9.9 Map Variables Instead of specifying values, we can map fill and color to variables as well. In the below example, we map fill to the variable stock. It assigns different colors to the different stocks. ggplot(tidy_returns) + geom_boxplot(aes(x = stock, y = returns, fill = stock)) Let us map color to the variable stock. It will assign different colors to the box borders. ggplot(tidy_returns) + geom_boxplot(aes(x = stock, y = returns, color = stock)) "],["ggplot2-histogram.html", "Chapter 10 Histograms 10.1 Introduction 10.2 Data 10.3 Plot 10.4 Aesthetics 10.5 Putting it all together 10.6 Bin Width 10.7 Line Type 10.8 Line Size 10.9 Map Variables", " Chapter 10 Histograms 10.1 Introduction In this chapter, we will learn to build histogram specify bins modify color fill alpha bin width line type line size map aesthetics to variables A histogram is a plot that can be used to examine the shape and spread of continuous data. It looks very similar to a bar graph and can be used to detect outliers and skewness in data. The histogram graphically shows the following: center (location) of the data spread (dispersion) of the data skewness outliers presence of multiple modes To construct a histogram, the data is split into intervals called bins. The intervals may or may not be equal sized. For each bin, the number of data points that fall into it are counted (frequency). The Y axis of the histogram represents the frequency and the X axis represents the variable. 10.2 Data ecom &lt;- readr::read_csv(&#39;https://raw.githubusercontent.com/rsquaredacademy/datasets/master/web.csv&#39;) ecom ## # A tibble: 1,000 x 11 ## id referrer device bouncers n_visit n_pages duration country purchase ## &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt; &lt;lgl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt; &lt;lgl&gt; ## 1 1 google laptop TRUE 10 1 693 Czech Repub~ FALSE ## 2 2 yahoo tablet TRUE 9 1 459 Yemen FALSE ## 3 3 direct laptop TRUE 0 1 996 Brazil FALSE ## 4 4 bing tablet FALSE 3 18 468 China TRUE ## 5 5 yahoo mobile TRUE 9 1 955 Poland FALSE ## 6 6 yahoo laptop FALSE 5 5 135 South Africa FALSE ## 7 7 yahoo mobile TRUE 10 1 75 Bangladesh FALSE ## 8 8 direct mobile TRUE 10 1 908 Indonesia FALSE ## 9 9 bing mobile FALSE 3 19 209 Netherlands FALSE ## 10 10 google mobile TRUE 6 1 208 Czech Repub~ FALSE ## # ... with 990 more rows, and 2 more variables: order_items &lt;dbl&gt;, ## # order_value &lt;dbl&gt; 10.2.1 Data Dictionary id: row id referrer: referrer website/search engine os: operating system browser: browser device: device used to visit the website n_pages: number of pages visited duration: time spent on the website (in seconds) repeat: frequency of visits country: country of origin purchase: whether visitor purchased order_value: order value of visitor (in dollars) 10.3 Plot To create a histogram, we will use geom_histogram() and specify the variable name within aes(). In the below example, we create histogram of the variable n_visit. ggplot(ecom) + geom_histogram(aes(n_visit)) ## `stat_bin()` using `bins = 30`. Pick better value with `binwidth`. 10.3.1 Specify Bins The default number of bins in ggplot2 is 30. You can modify the number of bins using the bins argument. In the below example, we create a histogram with 7 bins. ggplot(ecom) + geom_histogram(aes(n_visit), bins = 7) 10.4 Aesthetics Now that we know how to create a histogram, let us learn to modify its appearance. We will begin with the background color. Use the fill argument to modify the background color of the histogram. In the below case, we change the color of the histogram to blue. ggplot(ecom) + geom_histogram(aes(n_visit), bins = 7, fill = &#39;blue&#39;) As we have learnt before, the transparency of the background color can be modified using the alpha argument. It can take any value between 0 and 1. ggplot(ecom) + geom_histogram(aes(n_visit), bins = 7, fill = &#39;blue&#39;, alpha = 0.3) The color of the histogram border can be modified using the color argument. The color can be specified either using its name or the associated hex code. ggplot(ecom) + geom_histogram(aes(n_visit), bins = 7, fill = &#39;white&#39;, color = &#39;blue&#39;) 10.5 Putting it all together Let us modify the bins, the background and border color of the histogram in the below example. ggplot(ecom) + geom_histogram(aes(n_visit), bins = 7, fill = &#39;blue&#39;, color = &#39;white&#39;) 10.6 Bin Width Another way to control the number of bins in a histogram is by using the binwidth argument. In this case, we specify the width of the bins instead of the number of bins. As you can see, in the below example, we do not use the bins argument when using the binwidth argument. You can use either of them but not both. ggplot(ecom) + geom_histogram(aes(n_visit), binwidth = 2, fill = &#39;blue&#39;, color = &#39;black&#39;) 10.7 Line Type The line type of the histogram border can be modified using the linetype argument. It can take any integer value between 0 and 6. ggplot(ecom) + geom_histogram(aes(n_visit), bins = 5, fill = &#39;white&#39;, color = &#39;blue&#39;, linetype = 3) 10.8 Line Size Use the size argument to modify the width of the border of the histogram bins. It can take any value greater than 0. ggplot(ecom) + geom_histogram(aes(n_visit), bins = 5, fill = &#39;white&#39;, color = &#39;blue&#39;, size = 1.25) 10.9 Map Variables You can map the aesthetics to variables as well. In the below example, we map fill to the device variable. You can try mapping color, linetype and size to variables as well. ggplot(ecom) + geom_histogram(aes(n_visit, fill = device), bins = 7) "],["ggplot2-modify-axis.html", "Chapter 11 Modify Axis 11.1 Continuous Axis 11.2 Discrete Axis 11.3 Putting it all together", " Chapter 11 Modify Axis In this chapter, we will learn how to modify the X and Y axis using the following functions: Continuous Axis scale_x_continuous() scale_y_continuous() Discrete Axis scale_x_discrete() scale_y_discrete() 11.1 Continuous Axis If the X and Y axis represent continuous data, we can use scale_x_continuous() and scale_y_continuous() to modify the axis. They take the following arguments: name limits breaks labels position Let us continue with the scatter plot we have used in previous chapter. ggplot(mtcars) + geom_point(aes(disp, mpg)) The name argument is used to modify the X axis label. In the below example, we change the X axis label to 'Displacement'. In previous chapters, we have used xlab() to work with the X axis label. ggplot(mtcars) + geom_point(aes(disp, mpg)) + scale_x_continuous(name = &quot;Displacement&quot;) To modify the range, use the limits argument. It takes a vector of length 2 i.e. 2 values, the lower and upper limit of the range. It is an alternative for xlim(). ggplot(mtcars) + geom_point(aes(disp, mpg)) + scale_x_continuous(limits = c(0, 600)) In the above plot, the ticks on the X axis appear at 0, 200, 400 and 600. Let us say we want the ticks to appear more closer i.e. the difference between the tick should be reduced by 50. The breaks argument will allow us to specify where the ticks appear. It takes a numeric vector equal to the length of the number of ticks. ggplot(mtcars) + geom_point(aes(disp, mpg)) + scale_x_continuous(breaks = c(150, 300, 450)) We can change the tick labels using the labels argument. In the below example, we use words instead of numbers. When adding labels, we need to ensure that the length of the breaks and labels are same. ggplot(mtcars) + geom_point(aes(disp, mpg)) + scale_x_continuous(breaks = c(150, 300, 450), labels = c(&#39;One Hundred Fifty&#39;, &#39;Three Hundred&#39;, &#39;Four Hundred Fifity&#39;)) The position of the axes can be changed using the position argument. In the below example, we can move the axes to the top of the plot by supplying the value 'top'. ggplot(mtcars) + geom_point(aes(disp, mpg)) + scale_x_continuous(position = &#39;top&#39;) 11.1.1 Putting it all together.. ggplot(mtcars) + geom_point(aes(disp, mpg)) + scale_x_continuous(name = &quot;Displacement&quot;, limits = c(0, 600), breaks = c(0, 150, 300, 450, 600), position = &#39;top&#39;, labels = c(&#39;0&#39;, &#39;150&#39;, &#39;300&#39;, &#39;450&#39;, &#39;600&#39;)) 11.1.2 Y Axis - Continuous ggplot(mtcars) + geom_point(aes(disp, mpg)) + scale_y_continuous(name = &quot;Miles Per Gallon&quot;, limits = c(0, 45), breaks = c(0, 15, 30, 45), position = &#39;right&#39;, labels = c(&#39;0&#39;, &#39;15&#39;, &#39;30&#39;, &#39;45&#39;)) 11.2 Discrete Axis If the X and Y axis represent discrete or categorical data, scale_x_discrete() and scale_y_discrete() can be used to modify them. They take the following arguments: name labels breaks position The above options serve the same purpose as in the case of continuous scales. 11.2.1 Axis Label ggplot(mtcars) + geom_bar(aes(factor(cyl))) + scale_x_discrete(name = &quot;Number of Cylinders&quot;) 11.2.2 Axis Tick Labels ggplot(mtcars) + geom_bar(aes(factor(cyl))) + scale_x_discrete(labels = c(&quot;4&quot; = &quot;Four&quot;, &quot;6&quot; = &quot;Six&quot;, &quot;8&quot; = &quot;Eight&quot;)) 11.2.3 Axis Breaks ggplot(mtcars) + geom_bar(aes(factor(cyl))) + scale_x_discrete(breaks = c(&quot;4&quot;, &quot;6&quot;, &quot;8&quot;)) 11.2.4 Axis Position ggplot(mtcars) + geom_bar(aes(factor(cyl))) + scale_x_discrete(position = &#39;bottom&#39;) 11.3 Putting it all together ggplot(mtcars) + geom_bar(aes(factor(cyl))) + scale_x_discrete(name = &quot;Number of Cylinders&quot;, labels = c(&quot;4&quot; = &quot;Four&quot;, &quot;6&quot; = &quot;Six&quot;, &quot;8&quot; = &quot;Eight&quot;), breaks = c(&quot;4&quot;, &quot;6&quot;, &quot;8&quot;), position = &quot;bottom&quot;) "],["ggplot2-modify-legend.html", "Chapter 12 Modify Legend 12.1 Color 12.2 Fill 12.3 Shape 12.4 Size 12.5 Transparency 12.6 Guide", " Chapter 12 Modify Legend In this chapter, we will focus on modifying the appearance of legend of plots when the aesthetics are mapped to variables. 12.1 Color We will learn to modify the following when color is mapped to categorical variables: title breaks limits labels values Basic Plot Let us start with a scatter plot examining the relationship between displacement and miles per gallon from the mtcars data set. We will map the color of the points to the cyl variable. ggplot(mtcars) + geom_point(aes(disp, mpg, color = factor(cyl))) As you can see, the legend acts as a guide for the color aesthetic. Now, let us learn to modify the different aspects of the legend. Values To change the default colors in the legend, use the values argument and supply a character vector of color names. The number of colors specified must be equal to the number of levels in the categorical variable mapped. In the below example, cyl has 3 levels (4, 6, 8) and hence we have specified 3 colors. ggplot(mtcars) + geom_point(aes(disp, mpg, color = factor(cyl))) + scale_color_manual(values = c(&quot;red&quot;, &quot;blue&quot;, &quot;green&quot;)) Title In the previous example, the title of the legend (factor(cyl)) is not very intuitive. If the user does not know the underlying data, they will not be able to make any sense out of it. Let us change it to Cylinders using the name argument. ggplot(mtcars) + geom_point(aes(disp, mpg, color = factor(cyl))) + scale_color_manual(name = &quot;Cylinders&quot;, values = c(&quot;red&quot;, &quot;blue&quot;, &quot;green&quot;)) Now, the user will know that the different colors represent number of cylinders in the car. Limits Let us assume that we want to modify the data to be displayed i.e. instead of examining the relationship between mileage and displacement for all cars, we desire to look at only cars with at least 6 cylinders. One way to approach this would be to filter the data using filter from dplyr and then visualize it. Instead, we will use the limits argument and filter the data for visualization. ggplot(mtcars) + geom_point(aes(disp, mpg, color = factor(cyl))) + scale_color_manual(values = c(&quot;red&quot;, &quot;blue&quot;, &quot;green&quot;), limits = c(6, 8)) ## Warning: Continuous limits supplied to discrete scale. ## Did you mean `limits = factor(...)` or `scale_*_continuous()`? ## Warning: Removed 11 rows containing missing values (geom_point). As you can see above, ggplot2 returns a warning message indicating data related to 4 cylinders has been dropped. If you observe the legend, it now represents only 4 and 6 cylinders. Labels The labels in the legend can be modified using the labels argument. Let us change the labels to Four, Six and Eight in the next example. Ensure that the labels are intuitive and easy to interpret for the end user of the plot. ggplot(mtcars) + geom_point(aes(disp, mpg, color = factor(cyl))) + scale_color_manual(values = c(&quot;red&quot;, &quot;blue&quot;, &quot;green&quot;), labels = c(&#39;Four&#39;, &#39;Six&#39;, &#39;Eight&#39;)) Breaks When there are large number of levels in the mapped variable, you may not want the labels in the legend to represent all of them. In such cases, we can use the breaks argument and specify the labels to be used. In the below case, we use the breaks argument to ensure that the labels in legend represent two levels (4, 8) of the mapped variable. ggplot(mtcars) + geom_point(aes(disp, mpg, color = factor(cyl))) + scale_color_manual(values = c(&quot;red&quot;, &quot;blue&quot;, &quot;green&quot;), breaks = c(4, 8)) Putting it all together ggplot(mtcars) + geom_point(aes(disp, mpg, color = factor(cyl))) + scale_color_manual(name = &quot;Cylinders&quot;, values = c(&quot;red&quot;, &quot;blue&quot;, &quot;green&quot;), labels = c(&#39;Four&#39;, &#39;Six&#39;, &#39;Eight&#39;), limits = c(4, 6, 8), breaks = c(4, 6, 8)) ## Warning: Continuous limits supplied to discrete scale. ## Did you mean `limits = factor(...)` or `scale_*_continuous()`? 12.2 Fill we will learn to modify the following using scale_fill_manual() when fill is mapped to categorical variables: title breaks limits labels values Plot Let us start with a scatter plot examining the relationship between displacement and miles per gallon from the mtcars data set. We will map fill to the cyl variable. ggplot(mtcars) + geom_point(aes(disp, mpg, fill = factor(cyl)), shape = 22) As you can see, the legend acts as a guide for the color aesthetic. Now, let us learn to modify the different aspects of the legend. Title The title of the legend (factor(cyl)) is not very intuitive. If the user does not know the underlying data, they will not be able to make any sense out of it. Let us change it to Cylinders using the name argument. ggplot(mtcars) + geom_point(aes(disp, mpg, fill = factor(cyl)), shape = 22) + scale_fill_manual(name = &quot;Cylinders&quot;, values = c(&quot;red&quot;, &quot;blue&quot;, &quot;green&quot;)) Values To change the default colors in the legend, use the values argument and supply a character vector of color names. The number of colors specified must be equal to the number of levels in the categorical variable mapped. In the below example, cyl has 3 levels (4, 6, 8) and hence we have specified 3 colors. ggplot(mtcars) + geom_point(aes(disp, mpg, fill = factor(cyl)), shape = 22) + scale_fill_manual(values = c(&quot;red&quot;, &quot;blue&quot;, &quot;green&quot;)) Labels The labels in the legend can be modified using the labels argument. Let us change the labels to Four, Six and Eight in the next example. Ensure that the labels are intuitive and easy to interpret for the end user of the plot. ggplot(mtcars) + geom_point(aes(disp, mpg, fill = factor(cyl)), shape = 22) + scale_fill_manual(values = c(&quot;red&quot;, &quot;blue&quot;, &quot;green&quot;), labels = c(&#39;Four&#39;, &#39;Six&#39;, &#39;Eight&#39;)) Limits Let us assume that we want to modify the data to be displayed i.e. instead of examining the relationship between mileage and displacement for all cars, we desire to look at only cars with at least 6 cylinders. One way to approach this would be to filter the data using filter from dplyr and then visualize it. Instead, we will use the limits argument and filter the data for visualization. ggplot(mtcars) + geom_point(aes(disp, mpg, fill = factor(cyl)), shape = 22) + scale_fill_manual(values = c(&quot;red&quot;, &quot;blue&quot;, &quot;green&quot;), limits = c(6, 8)) ## Warning: Continuous limits supplied to discrete scale. ## Did you mean `limits = factor(...)` or `scale_*_continuous()`? As you can see above, ggplot2 returns a warning message indicating data related to 4 cylinders has been dropped. If you observe the legend, it now represents only 4 and 6 cylinders. Breaks When there are large number of levels in the mapped variable, you may not want the labels in the legend to represent all of them. In such cases, we can use the breaks argument and specify the labels to be used. In the below case, we use the breaks argument to ensure that the labels in legend represent two levels (4, 8) of the mapped variable. ggplot(mtcars) + geom_point(aes(disp, mpg, fill = factor(cyl)), shape = 22) + scale_fill_manual(values = c(&quot;red&quot;, &quot;blue&quot;, &quot;green&quot;), breaks = c(4, 8)) Putting it all together ggplot(mtcars) + geom_point(aes(disp, mpg, fill = factor(cyl)), shape = 22) + scale_fill_manual(name = &quot;Cylinders&quot;, values = c(&quot;red&quot;, &quot;blue&quot;, &quot;green&quot;), labels = c(&#39;Four&#39;, &#39;Six&#39;, &#39;Eight&#39;), limits = c(4, 6, 8), breaks = c(4, 6, 8)) ## Warning: Continuous limits supplied to discrete scale. ## Did you mean `limits = factor(...)` or `scale_*_continuous()`? 12.3 Shape We will learn to modify the following using scale_shape_manual when shape is mapped to categorical variables: title breaks limits labels values Plot Let us start with a scatter plot examining the relationship between displacement and miles per gallon from the mtcars data set. We will map the shape of the points to the cyl variable. ggplot(mtcars) + geom_point(aes(disp, mpg, shape = factor(cyl))) As you can see, the legend acts as a guide for the shape aesthetic. Now, let us learn to modify the different aspects of the legend. Title The title of the legend (factor(cyl)) is not very intuitive. If the user does not know the underlying data, they will not be able to make any sense out of it. Let us change it to Cylinders using the name argument. ggplot(mtcars) + geom_point(aes(disp, mpg, shape = factor(cyl))) + scale_shape_manual(name = &quot;Cylinders&quot;, values = c(4, 12, 24)) If you have mapped shape/size to a discrete variable which has less than six categories, you can use scale_shape(). ggplot(mtcars) + geom_point(aes(disp, mpg, shape = factor(cyl))) + scale_shape(name = &#39;Cylinders&#39;) Values To change the default shapes in the legend, use the values argument and supply a numeric vector of shapes. The number of shapes specified must be equal to the number of levels in the categorical variable mapped. In the below example, cyl has 3 levels (4, 6, 8) and hence we have specified 3 different shapes. ggplot(mtcars) + geom_point(aes(disp, mpg, shape = factor(cyl))) + scale_shape_manual(values = c(4, 12, 24)) Labels The labels in the legend can be modified using the labels argument. Let us change the labels to Four, Six and Eight in the next example. Ensure that the labels are intuitive and easy to interpret for the end user of the plot. ggplot(mtcars) + geom_point(aes(disp, mpg, shape = factor(cyl))) + scale_shape_manual(values = c(4, 12, 24), labels = c(&#39;Four&#39;, &#39;Six&#39;, &#39;Eight&#39;)) Limits Let us assume that we want to modify the data to be displayed i.e. instead of examining the relationship between mileage and displacement for all cars, we desire to look at only cars with at least 6 cylinders. One way to approach this would be to filter the data using filter from dplyr and then visualize it. Instead, we will use the limits argument and filter the data for visualization. ggplot(mtcars) + geom_point(aes(disp, mpg, shape = factor(cyl))) + scale_shape_manual(values = c(4, 24), limits = c(6, 8)) ## Warning: Continuous limits supplied to discrete scale. ## Did you mean `limits = factor(...)` or `scale_*_continuous()`? ## Warning: Removed 11 rows containing missing values (geom_point). As you can see above, ggplot2 returns a warning message indicating data related to 4 cylinders has been dropped. If you observe the legend, it now represents only 4 and 6 cylinders. Breaks When there are large number of levels in the mapped variable, you may not want the labels in the legend to represent all of them. In such cases, we can use the breaks argument and specify the labels to be used. In the below case, we use the breaks argument to ensure that the labels in legend represent two levels (4, 8) of the mapped variable. ggplot(mtcars) + geom_point(aes(disp, mpg, shape = factor(cyl))) + scale_shape_manual(values = c(4, 12, 24), breaks = c(4, 8)) Putting it all together ggplot(mtcars) + geom_point(aes(disp, mpg, shape = factor(cyl))) + scale_shape_manual(name = &quot;Cylinders&quot;, labels = c(&#39;Six&#39;, &#39;Eight&#39;), values = c(4, 24), limits = c(6, 8), breaks = c(6, 8)) ## Warning: Continuous limits supplied to discrete scale. ## Did you mean `limits = factor(...)` or `scale_*_continuous()`? ## Warning: Removed 11 rows containing missing values (geom_point). 12.4 Size We will learn to modify the following using scale_size_continuous when size aesthetic is mapped to variables: title breaks limits range labels values Plot Let us start with a scatter plot examining the relationship between displacement and miles per gallon from the mtcars data set. We will map the size of the points to the hp variable. Remember, size must always be mapped to a continuous variable. ggplot(mtcars) + geom_point(aes(disp, mpg, size = hp)) As you can see, the legend acts as a guide for the size aesthetic. Now, let us learn to modify the different aspects of the legend. Title The title of the legend (hp) is not very intuitive. If the user does not know the underlying data, they will not be able to make any sense out of it. Let us change it to Horsepower using the name argument. ggplot(mtcars) + geom_point(aes(disp, mpg, size = hp)) + scale_size_continuous(name = &quot;Horsepower&quot;) Range The range of the size of points can be modified using the range argument. We need to specify a lower and upper range using a numeric vector. In the below example, we use range and supply the lower and upper limits as 3 and 6. The size of the points will now lie between 3 and 6 only. ggplot(mtcars) + geom_point(aes(disp, mpg, size = hp)) + scale_size_continuous(range = c(3, 6)) Limits Let us assume that we want to modify the data to be displayed i.e. instead of examining the relationship between mileage and displacement for all cars, we desire to look at only cars whose horsepower is between 100 and 350. One way to approach this would be to filter the data using filter from dplyr and then visualize it. Instead, we will use the limits argument and filter the data for visualization. ggplot(mtcars) + geom_point(aes(disp, mpg, size = hp)) + scale_size_continuous(limits = c(100, 350)) ## Warning: Removed 9 rows containing missing values (geom_point). Breaks When the range of the variable mapped to size is large, you may not want the labels in the legend to represent all of them. In such cases, we can use the breaks argument and specify the labels to be used. In the below case, we use the breaks argument to ensure that the labels in legend represent certain midpoints (125, 200, 275) of the mapped variable. ggplot(mtcars) + geom_point(aes(disp, mpg, size = hp)) + scale_size_continuous(breaks = c(125, 200, 275)) Labels The labels in the legend can be modified using the labels argument. Let us change the labels to 1 Hundred, 2 Hundred and 3 Hundred in the next example. Ensure that the labels are intuitive and easy to interpret for the end user of the plot. ggplot(mtcars) + geom_point(aes(disp, mpg, size = hp)) + scale_size_continuous(breaks = c(100, 200, 300), labels = c(&quot;1 Hundred&quot;, &quot;2 Hundred&quot;, &quot;3 Hundred&quot;)) Putting it all together ggplot(mtcars) + geom_point(aes(disp, mpg, size = hp)) + scale_size_continuous(name = &quot;Horsepower&quot;, range = c(3, 6), limits = c(0, 400), breaks = c(100, 200, 300), labels = c(&quot;1 Hundred&quot;, &quot;2 Hundred&quot;, &quot;3 Hundred&quot;)) 12.5 Transparency We will learn to modify the following using scale_alpha_continuous() when alpha or transparency is mapped to variables: title breaks limits range labels values Plot Let us start with a scatter plot examining the relationship between displacement and miles per gallon from the mtcars data set. We will map the transparency of the points to the hp variable. Remember, alpha must always be mapped to a continuous variable. ggplot(mtcars) + geom_point(aes(disp, mpg, alpha = hp), color = &#39;blue&#39;) As you can see, the legend acts as a guide for the alpha aesthetic. Now, let us learn to modify the different aspects of the legend. Title The title of the legend (hp) is not very intuitive. If the user does not know the underlying data, they will not be able to make any sense out of it. Let us change it to Horsepower using the name argument. ggplot(mtcars) + geom_point(aes(disp, mpg, alpha = hp), color = &#39;blue&#39;) + scale_alpha_continuous(&quot;Horsepower&quot;) Breaks When the range of the variable mapped to size is large, you may not want the labels in the legend to represent all of them. In such cases, we can use the breaks argument and specify the labels to be used. In the below case, we use the breaks argument to ensure that the labels in legend represent certain midpoints (125, 200, 275) of the mapped variable. ggplot(mtcars) + geom_point(aes(disp, mpg, alpha = hp), color = &#39;blue&#39;) + scale_alpha_continuous(breaks = c(125, 200, 275)) Limits Let us assume that we want to modify the data to be displayed i.e. instead of examining the relationship between mileage and displacement for all cars, we desire to look at only cars whose horsepower is between 100 and 350. One way to approach this would be to filter the data using filter from dplyr and then visualize it. Instead, we will use the limits argument and filter the data for visualization. ggplot(mtcars) + geom_point(aes(disp, mpg, alpha = hp), color = &#39;blue&#39;) + scale_alpha_continuous(limits = c(100, 350)) Range The range of the transparency of points can be modified using the range argument. We need to specify a lower and upper range using a numeric vector. In the below example, we use range and supply the lower and upper limits as 0.4 and 0.8. The transparency of the points will now lie between 0.4 and 0.8 only. ggplot(mtcars) + geom_point(aes(disp, mpg, alpha = hp), color = &#39;blue&#39;) + scale_alpha_continuous(range = c(0.4, 0.8)) Labels The labels in the legend can be modified using the labels argument. Let us change the labels to 1 Hundred, 2 Hundred and 3 Hundred in the next example. Ensure that the labels are intuitive and easy to interpret for the end user of the plot. ggplot(mtcars) + geom_point(aes(disp, mpg, alpha = hp), color = &#39;blue&#39;) + scale_alpha_continuous(breaks = c(100, 200, 300), labels = c(&quot;1 Hundred&quot;, &quot;2 Hundred&quot;, &quot;3 Hundred&quot;)) Putting it all together ggplot(mtcars) + geom_point(aes(disp, mpg, alpha = hp), color = &#39;blue&#39;) + scale_alpha_continuous(&quot;Horsepower&quot;, breaks = c(100, 200, 300), limits = c(100, 350), range = c(0.4, 0.8), labels = c(&quot;1 Hundred&quot;, &quot;2 Hundred&quot;, &quot;3 Hundred&quot;)) 12.6 Guide In this section, we will learn to modify title label and bar So far, we have learnt to modify the components of a legend using scale_* family of functions. Now, we will use the guide argument and supply it values using the guide_legend() function. Title Title Alignment The horizontal alignment of the title can be managed using the title.hjust argument. It can take any value between 0 and 1. 0 (left) 1 (right) In the below example, we align the title to the center by assigning the value 0.5. ggplot(mtcars) + geom_point(aes(disp, mpg, color = factor(cyl))) + scale_color_manual(values = c(&quot;red&quot;, &quot;blue&quot;, &quot;green&quot;), guide = guide_legend(title = &quot;Cylinders&quot;, title.hjust = 0.5)) Title Alignment (Vertical) To manage the vertical alignment of the title, use title.vjust. ggplot(mtcars) + geom_point(aes(disp, mpg, color = hp)) + scale_color_continuous(guide = guide_colorbar( title = &quot;Horsepower&quot;, title.position = &quot;top&quot;, title.vjust = 1)) Title Position The position of the title can be managed using title.posiiton argument. It can be positioned at: top bottom left right ggplot(mtcars) + geom_point(aes(disp, mpg, color = factor(cyl))) + scale_color_manual(values = c(&quot;red&quot;, &quot;blue&quot;, &quot;green&quot;), guide = guide_legend(title = &quot;Cylinders&quot;, title.hjust = 0.5, title.position = &quot;top&quot;)) Label Label Position The position of the label can be managed using the label.position argument. It can be positioned at: top bottom left right In the below example, we position the label at right. ggplot(mtcars) + geom_point(aes(disp, mpg, color = factor(cyl))) + scale_color_manual(values = c(&quot;red&quot;, &quot;blue&quot;, &quot;green&quot;), guide = guide_legend(label.position = &quot;right&quot;)) Label Alignment The horizontal alignment of the label can be managed using the label.hjust argument. It can take any value between 0 and 1. 0 (left) 1 (right) In the below example, we align the label to the center by assigning the value 0.5. alignment 0 (left) 1 (right) ggplot(mtcars) + geom_point(aes(disp, mpg, color = factor(cyl))) + scale_color_manual(values = c(&quot;red&quot;, &quot;blue&quot;, &quot;green&quot;), guide = guide_legend(label.hjust = 0.5)) Labels Alignment (Vertical) The vertical alignment of the label can be managed using the label.vjust argument. ggplot(mtcars) + geom_point(aes(disp, mpg, color = hp)) + scale_color_continuous(guide = guide_colorbar( label.vjust = 0.8)) Direction The direction of the label can be either horizontal or veritcal and it can be set using the direction argument. ggplot(mtcars) + geom_point(aes(disp, mpg, color = factor(cyl))) + scale_color_manual(values = c(&quot;red&quot;, &quot;blue&quot;, &quot;green&quot;), guide = guide_legend(direction = &quot;horizontal&quot;)) Rows The label can be spread across multiple rows using the nrow argument. In the below example, the label is spread across 2 rows. ggplot(mtcars) + geom_point(aes(disp, mpg, color = factor(cyl))) + scale_color_manual(values = c(&quot;red&quot;, &quot;blue&quot;, &quot;green&quot;), guide = guide_legend(nrow = 2)) Reverse The order of the labels can be reversed using the reverse argument. We need to supply logical values i.e. either TRUE or FALSE. If TRUE, the order will be reversed. ggplot(mtcars) + geom_point(aes(disp, mpg, color = factor(cyl))) + scale_color_manual(values = c(&quot;red&quot;, &quot;blue&quot;, &quot;green&quot;), guide = guide_legend(reverse = TRUE)) Putting it all together ggplot(mtcars) + geom_point(aes(disp, mpg, color = factor(cyl))) + scale_color_manual(values = c(&quot;red&quot;, &quot;blue&quot;, &quot;green&quot;), guide = guide_legend(title = &quot;Cylinders&quot;, title.hjust = 0.5, title.position = &quot;top&quot;, label.position = &quot;right&quot;, direction = &quot;horizontal&quot;, label.hjust = 0.5, nrow = 2, reverse = TRUE) ) Legend Bar So far we have looked at modifying components of the legend when it acts as a guide for color, fill or shape i.e. when the aesthetics have been mapped to a categorical variable. In this section, you will learn about guide_colorbar() which will allow us to modify the legend when the aesthetics are mapped to a continuous variable. Plot Let us start with a scatter plot examining the relationship between displacement and miles per gallon from the mtcars data set. We will map the color of the points to the hp variable. ggplot(mtcars) + geom_point(aes(disp, mpg, color = hp)) Width The width of the bar can be modified using the barwidth argument. It is used inside the guide_colorbar() function which itself is supplied to the guide argument of scale_color_continuous(). ggplot(mtcars) + geom_point(aes(disp, mpg, color = hp)) + scale_color_continuous(guide = guide_colorbar( barwidth = 10)) Height Similarly, the height of the bar can be modified using the barheight argument. ggplot(mtcars) + geom_point(aes(disp, mpg, color = hp)) + scale_color_continuous(guide = guide_colorbar( barheight = 3)) Bins The nbin argument allows us to specify the number of bins in the bar. ggplot(mtcars) + geom_point(aes(disp, mpg, color = hp)) + scale_color_continuous(guide = guide_colorbar( nbin = 4)) Ticks The ticks of the bar can be removed using the ticks argument and setting it to FALSE. ggplot(mtcars) + geom_point(aes(disp, mpg, color = hp)) + scale_color_continuous(guide = guide_colorbar( ticks = FALSE)) Upper/Lower Limits The upper and lower limits of the bars can be drawn or undrawn using the draw.ulim and draw.llim arguments. They both accept logical values. ggplot(mtcars) + geom_point(aes(disp, mpg, color = hp)) + scale_color_continuous(guide = guide_colorbar( draw.ulim = TRUE, draw.llim = FALSE)) 12.6.0.1 Guides: Color, Shape &amp; Size The guides() function can be used to create multiple legends to act as a guide for color, shape, size etc. as shown below. First, we map color, shape and size to different variables. Next, in the guides() function, we supply values to each of the above aesthetics to indicate the type of legend. ggplot(mtcars) + geom_point(aes(disp, mpg, color = hp, size = qsec, shape = factor(gear))) + guides(color = &quot;colorbar&quot;, shape = &quot;legend&quot;, size = &quot;legend&quot;) Guides: Title To modify the components of the different legends, we must use the guide_* family of functions. In the below example, we use guide_colorbar() for the legend acting as guide for color mapped to a continuous variable and guide_legend() for the legends acting as guide for shape/size mapped to categorical variables. ggplot(mtcars) + geom_point(aes(disp, mpg, color = hp, size = wt, shape = factor(gear))) + guides(color = guide_colorbar(title = &quot;Horsepower&quot;), shape = guide_legend(title = &quot;Weight&quot;), size = guide_legend(title = &quot;Gear&quot;) ) "],["ggplot2-facets.html", "Chapter 13 Faceting 13.1 Introduction 13.2 Grid 13.3 Wrap", " Chapter 13 Faceting 13.1 Introduction In this chapter, we will learn about faceting i.e. combining plots. Let us continue with the scatter plot examining the relationship between displacement and miles per gallon but let us make one additional change. We now want 3 sub plots for each type of cylinder. How can we do this? We can split or group the data by cylinder type and plot the subset of data which means dealing with 3 different data sets, plotting 3 plots and arranging them for comparison. ggplot2 offers the following 2 functions which allow us to plot subset of data with a simple formula based interface: facet_grid() facet_wrap() Faceting allows us to create multiple sub plots. It partitions a plot into a matrix of panels with each panel showing a different subset of data. 13.2 Grid 13.2.1 Vertical facet_grid() allows us to split up the data by one or two discrete variables and create sub plots. The sub plots can be arranged horizontally or vertically using a formula of the form vertical ~ horizontal. In the below example, 3 sub plots are created, one each for the levels of the cyl variable and the sub plots are arranged vertically ggplot(mtcars, aes(disp, mpg)) + geom_point() + facet_grid(cyl ~ .) 13.2.2 Horizontal Below we reproduce the previous example but arrange the sub plots horizontally. ggplot(mtcars, aes(disp, mpg)) + geom_point() + facet_grid(. ~ cyl) 13.2.3 Vertical &amp; Horizontal In certain cases, we might want different discrete variables to represent the horizontal and vertical direction. In the below example, we examine the relationship between displacement and miles per gallon for different combinations of cyl and gear variables. ggplot(mtcars, aes(disp, mpg)) + geom_point() + facet_grid(cyl ~ gear) Below, we switch the variables representing the vertical and horizontal directions. ggplot(mtcars, aes(disp, mpg)) + geom_point() + facet_grid(gear ~ cyl) 13.2.4 Scales If you carefully observe the second example, the range of X axis is same for all the 3 sub plots i.e. it is a fixed range. You can allow each of the sub plots to have different range using the scales argument and supplying it the value 'free'. ggplot(mtcars, aes(disp, mpg, color = factor(cyl))) + geom_point() + facet_grid(. ~ cyl, scales = &quot;free&quot;) Now, each of the sub plot has a different range. 13.2.5 Switch Labels In the third example, the labels are displayed at the bottom for X axis and at the right for the Y axis. It can be changed using the switch argument and supplying the value 'both'. The labels will now be displayed at the top for the X axis and at left for the Y axis. If you just want to change the labels for a particular axis, use the values x and y for the X and Y axis respectively. ggplot(mtcars, aes(disp, mpg)) + geom_point() + facet_grid(cyl ~ gear, switch = &quot;both&quot;) 13.3 Wrap facet_wrap() allows us to arrange sub plots in a certain number of rows and columns. In the below example, we will use facet_wrap() to arrange the sub plots in a single row. ggplot(mtcars, aes(disp, mpg)) + geom_point() + facet_wrap(~cyl) 13.3.1 Specify Rows To arrange the sub plots in a specific number of rows, use the nrow argument. In the below example, we arrange the sub plots in 2 rows. ggplot(mtcars, aes(disp, mpg)) + geom_point() + facet_wrap(~cyl, nrow = 2) 13.3.2 Specify Columns Here, we arrange the sub plots in 3 columns instead of rows using the ncol argument. ggplot(mtcars, aes(disp, mpg)) + geom_point() + facet_wrap(~cyl, ncol = 3) 13.3.3 Scales You can allow each of the sub plots to have different range using the scales argument and supplying it the value 'free'. ggplot(mtcars, aes(disp, mpg)) + geom_point() + facet_wrap(~cyl, scales = &quot;free&quot;) 13.3.4 Rows &amp; Columns If 2 discrete variables are used to create the sub plots, we can either use the formula interface to specify the variables as shown below ggplot(mtcars, aes(disp, mpg)) + geom_point() + facet_wrap(~cyl + gear, nrow = 2) or use a character vector of variable names. ggplot(mtcars, aes(disp, mpg)) + geom_point() + facet_wrap(c(&quot;cyl&quot;, &quot;gear&quot;), ncol = 2) "],["ggplot2-themes.html", "Chapter 14 Themes 14.1 Introduction 14.2 Basic Plot 14.3 Axis 14.4 Legend 14.5 Themes", " Chapter 14 Themes 14.1 Introduction In this final chapter, we will learn to modify the appearance of all non data components of the plot such as: axis legend panel plot area background margin facets 14.2 Basic Plot We will continue with the scatter plot examining the relationship between displacement and miles per gallon from the the mtcars data set. p &lt;- ggplot(mtcars) + geom_point(aes(disp, mpg)) p 14.3 Axis 14.3.1 Text The axis.title.x argument can be used to modify the appearance of the X axis. In the below example, we modify the color and size of the title using the element_text() function. Remember, whenever you are trying to modify the appearance of a theme element which is a text, you must use element_text(). You can use axis.title.y to modify the Y axis title and to modify the title of both the axis together, use axis.title. p + theme(axis.title.x = element_text(color = &quot;red&quot;, size = 10, face = &quot;italic&quot;)) 14.3.2 Ticks To modify the appearance of the axis ticks, use the axis.ticks argument. You can change the color, size, linetype and length of the ticks using the element_line() function as shown below. p + theme(axis.ticks = element_line(color = &#39;blue&#39;, size = 1.25, linetype = 2), axis.ticks.length = unit(1, &quot;cm&quot;)) 14.3.3 Line The axis.line argument should be used to modify the appearance of the axis lines. You can change the color, size and linetype of the line using the element_line() function. p + theme(axis.line = element_line(color = &#39;red&#39;, size = 1.5, linetype = 3)) 14.4 Legend Now, let us look at modifying the non-data components of a legend. p &lt;- ggplot(mtcars) + geom_point(aes(disp, mpg, color = factor(cyl), shape = factor(gear))) p 14.4.1 Background The background of the legend can be modified using the legend.background argument. You can change the background color, the border color and line type using element_rect(). p + theme(legend.background = element_rect(fill = &#39;gray&#39;, linetype = 3, color = &quot;black&quot;)) 14.4.2 Text The appearance of the text can be modified using the legend.text argument. You can change the color, size and font using the element_text() function. p + theme(legend.text = element_text(color = &#39;green&#39;, face = &#39;italic&#39;)) 14.4.3 Title The appearance fo the title of the legend can be modified using the legend.title argument. You can change the color, size, font and alignment using element_text(). p + theme(legend.title = element_text(color = &#39;blue&#39;, face = &#39;bold&#39;), legend.title.align = 0.1) 14.4.4 Position The position and direction of the legend can be changed using: legend.position and legend.direction p + theme(legend.position = &quot;top&quot;, legend.direction = &quot;horizontal&quot;) 14.5 Themes 14.5.1 Classic Dark on Light ggplot(mtcars) + geom_point(aes(disp, mpg)) + theme_bw() 14.5.2 Default Gray ggplot(mtcars) + geom_point(aes(disp, mpg)) + theme_gray() 14.5.3 Light ggplot(mtcars) + geom_point(aes(disp, mpg)) + theme_light() 14.5.4 Minimal ggplot(mtcars) + geom_point(aes(disp, mpg)) + theme_minimal() 14.5.5 Dark ggplot(mtcars) + geom_point(aes(disp, mpg)) + theme_dark() 14.5.6 Classic ggplot(mtcars) + geom_point(aes(disp, mpg)) + theme_classic() 14.5.7 Void (Empty) ggplot(mtcars) + geom_point(aes(disp, mpg)) + theme_void() "]]
